#!/bin/bash

echo -e "--- Análise Detalhada dos Jobs ---\n"

TASKS_LOG="tasks_mangement.log"

declare -a bg_tasks_pid=()  # vetor simples
declare -A pid_command_map  # Array associativo

readarray -t job_lines < <(jobs -l 2>&1)


if [ ${#job_lines[@]} -eq 0 ]; then
    echo "Nenhum job trabalhando em segundo plano!"
else
    echo "Jobs encontrados:"
    for line in "${job_lines[@]}"; do
        echo "Linha original (da saída do jobs): '$line'"

        parsed_info=$(echo "$line" | awk '{
            job_id_raw = $1;
            gsub(/\[|\]|\+|\-/, "", job_id_raw);
            job_id = job_id_raw;
            
            pid = $2;
            status = $3;

            command_start_index = 4;

            job_command_str = "";

            if (status == "Parado" && match($0, /Parado[[:space:]]+\(entrada tty\)/)) {
                status = "Parado (entrada tty)";    
                command_start_pos = RSTART + RLENGTH + 1;

                job_command_str = substr($0, command_start_pos);
            } else {

                if (match($0, /^[[:space:]]*[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]+[^[:space:]]+[[:space:]]*(.*)$/, arr)) {
                    job_command_str = arr[1]; 
                }
            }
            gsub(/"/, "\\\"", job_command_str);
            gsub(/&$/, "", job_command_str);
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", job_command_str);
            
            printf "job_id=\"%s\" pid=\"%s\" status=\"%s\" job_command=\"%s\"\n", job_id, pid, status, job_command_str;
        }')

        echo "Saída do AWK para eval: '$parsed_info'"

        # Avalia a string gerada pelo AWK para definir as variáveis
        eval "$parsed_info"

        # Verifica se as variáveis foram definidas com sucesso
        if [[ -n "$pid" && -n "$job_id" ]]; then # Verificamos ambas para robustez
            echo "  ✅ Parseado com Sucesso!"
            echo "    Job ID: $job_id"
            echo "    PID: $pid"
            echo "    Status: $status"
            echo "    Comando: $job_command"

            bg_tasks_pid+=("$pid") 
            pid_command_map["$pid"]="$job_command"
        else
            echo "  ❌ ERRO: O AWK não conseguiu extrair as informações da linha ou elas estão incompletas: '$line'"
        fi
        echo # Linha em branco para melhor visualização
        unset job_id pid status job_command # Limpar variáveis para a próxima iteração
    done
fi


echo -e "\nMinhas tarefas em Segundo Plano: ${bg_tasks_pid[@]}"

if [ "${#bg_tasks_pid[@]}" -gt 0 ]; then
    echo "Finalizando as tarefas listadas..."
    for pid in "${bg_tasks_pid[@]}"; do
        kill -9 "$pid"
        
        local_job_command="${pid_command_map["$pid"]}"
        echo "Encerrando processo $pid: '$local_job_command'" >> task_managment.log
    done
else
    echo -e "No momento não há nenhuma tarefa para ser gerenciada!"
fi 



echo -e "------------ Fim da Atividade de Gerenciamento ------------\n"


